from typing import List, Optional

from sqlalchemy import ForeignKey, String, create_engine, insert, select
from sqlalchemy.orm import DeclarativeBase, Mapped, Session, mapped_column, relationship
from sqlalchemy.orm.exc import DetachedInstanceError


class Base(DeclarativeBase):
    pass


class User(Base):
    __tablename__ = "user_account"
    id: Mapped[int] = mapped_column(primary_key=True)
    name: Mapped[str] = mapped_column(String(30))
    fullname: Mapped[Optional[str]]
    addresses: Mapped[List["Address"]] = relationship(back_populates="user")

    def __repr__(self) -> str:
        return f"User(id={self.id!r}, name={self.name!r}, fullname={self.fullname!r})"


class Address(Base):
    __tablename__ = "address"
    id: Mapped[int] = mapped_column(primary_key=True)
    email_address: Mapped[str]
    user_id = mapped_column(ForeignKey("user_account.id"))
    user: Mapped[User] = relationship(back_populates="addresses")

    def __repr__(self) -> str:
        return f"Address(id={self.id!r}, email_address={self.email_address!r})"


## 1. Inserting Rows using the ORM Unit of Work pattern

## 1.1. Instances of Classes represent Rows
squidward = User(name="squidward", fullname="Squidward Tentacles")
krabs = User(name="ehkrabs", fullname="Eugene H. Krabs")

print(squidward)

## 1.2. Adding objects to a Session

engine = create_engine("sqlite+pysqlite:///:memory:", echo=True)

Base.metadata.create_all(engine)

session = Session(engine)
session.add(squidward)
session.add(krabs)

print(session.new)


## 1.3. Flushing
session.flush()

## 1.4. Autogenerated primary key attributes
print(squidward.id)
print(krabs.id)

## 1.5. Getting Objects by Primary Key from the Identity Map

# 세션 살아 있는 동안, PK값으로 객체를 찾을 수 있음.

# Existed
some_squidward = session.get(User, 1)
print(some_squidward)

# Not existed
some_squidward = session.get(User, 111)
print(some_squidward)


## 1.6. Committing
session.commit()


## 2. Updating ORM Objects using the Unit of Work pattern
sandy = User(name="sandy", fullname="Sandy Cheeks")
session.add(sandy)
session.commit()

sandy = session.execute(select(User).filter_by(name="sandy")).scalar_one()

print(sandy)

sandy.fullname = "Sandy Squirrel"

print(sandy in session.dirty)

sandy_fullname = session.execute(select(User.fullname).where(User.id == 3)).scalar_one()
print(sandy_fullname)

print(sandy in session.dirty)

## 3. Deleting ORM Objects using the Unit of Work pattern
sandy = session.get(User, 3)
session.delete(sandy)
session.execute(select(User).where(User.name == "sandy")).first()

print(sandy in session)


## 4. Bulk / Multi Row INSERT, upsert, UPDATE and DELETE
# session.execute(
#     insert(User),
#     [
#         {"name": "spongebob", "fullname": "Spongebob Squarepants"},
#         {"name": "patrick", "fullname": "Patrick Star"},
#         {"name": "squidward", "fullname": "Squidward Tentacles"},
#         {"name": "ehkrabs", "fullname": "Eugene H. Krabs"},
#     ],
# )

## 5. Rolling Back
session.rollback()

print(sandy.fullname)
print(sandy.__dict__)
print(sandy in session)

print(session.execute(select(User).where(User.name == "sandy")).scalar_one() is sandy)


## 6. Closing a Session
session.close()

try:
    squidward.name
except DetachedInstanceError as e:
    print(e)

session.add(squidward)
print(squidward.name)
